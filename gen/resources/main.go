//go:build exclude

package main

import (
	"fmt"
	"regexp"
	"text/template"

	"github.com/Vilsol/go-mlog/gen"
	"github.com/magiconair/properties"
)

type Resource struct {
	Name        string
	Title       string
	Description string
}

func resources(reousrceType string, p *properties.Properties) []Resource {
	re := regexp.MustCompile(fmt.Sprintf(`%s\.([^.]+)\.description`, reousrceType))
	resources := make([]Resource, 0)
	props := p.FilterRegexp(re)
	for _, k := range props.Keys() {
		name := re.FindStringSubmatch(k)[1]
		resources = append(resources, Resource{
			Name:        name,
			Title:       gen.TitleCase(name),
			Description: props.MustGetString(k),
		})
	}
	return resources
}

func main() {

	p := properties.MustLoadURL("https://raw.githubusercontent.com/Anuken/Mindustry/refs/heads/master/core/assets/bundles/bundle.properties")

	data := struct {
		Items   []Resource
		Liquids []Resource
	}{
		Items:   resources("item", p),
		Liquids: resources("liquid", p),
	}

	gen.Save("m/types_resources.go", typesTemplate, data)
	gen.Save("m/impl/types_resources.go", typesImplTemplate, data)
}

var typesTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package m

type Items interface {
{{- range .Items }}
	// {{.Description}}
	{{.Title}}() int
{{- end }}
}

type Liquids interface {
{{- range .Liquids }}
	// {{.Description}}
	{{.Title}}() float64
{{- end }}
}
`))

var typesImplTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package impl

import "github.com/Vilsol/go-mlog/transpiler"

func init() {
	// Items
{{- range .Items }}
	transpiler.RegisterFuncTranslation("{{.Title}}", createSensorFuncTranslation("@{{.Name}}"))
{{- end }}

	// Liquids
{{- range .Liquids }}
	transpiler.RegisterFuncTranslation("{{.Title}}", createSensorFuncTranslation("@{{.Name}}"))
{{- end }}
}
`))
